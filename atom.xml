<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阳光下的少年</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shangchao.fun/"/>
  <updated>2021-04-14T14:36:31.830Z</updated>
  <id>https://shangchao.fun/</id>
  
  <author>
    <name>阳光下的少年</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git</title>
    <link href="https://shangchao.fun/2018/06/25/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://shangchao.fun/2018/06/25/第一个博客/</id>
    <published>2018-06-25T15:20:55.000Z</published>
    <updated>2021-04-14T14:36:31.830Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/CyC2018/Backend-Interview-Guide" target="_blank" rel="noopener">点击阅读面试进阶指南 </a><!-- GFM-TOC --></li><li><a href="#集中式与分布式">集中式与分布式</a></li><li><a href="#中心服务器">中心服务器</a></li><li><a href="#工作流">工作流</a></li><li><a href="#分支实现">分支实现</a></li><li><a href="#冲突">冲突</a></li><li><a href="#fast-forward">Fast forward</a></li><li><a href="#分支管理策略">分支管理策略</a></li><li><a href="#储藏stashing">储藏（Stashing）</a></li><li><a href="#ssh-传输设置">SSH 传输设置</a></li><li><a href="#gitignore-文件">.gitignore 文件</a></li><li><a href="#git-命令一览">Git 命令一览</a></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="集中式与分布式"><a href="#集中式与分布式" class="headerlink" title="集中式与分布式"></a>集中式与分布式</h1><p>Git 属于分布式版本控制系统，而 SVN 属于集中式。</p><div align="center"> <img src="pics/fac3dfd6-1656-4329-9a80-7f6c51ef30c5_200.png"> </div><br><p>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。</p><p>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。</p><p>集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件的会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。</p><p>分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。</p><h1 id="中心服务器"><a href="#中心服务器" class="headerlink" title="中心服务器"></a>中心服务器</h1><p>中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。</p><p>Github 就是一个中心服务器。</p><h1 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h1><p>新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。</p><p>Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History 中存有所有分支，使用一个 HEAD 指针指向当前分支。</p><div align="center"> <img src="pics/0f9b9d2a-c5cc-4a3f-b138-2c1035950f39_200.png"> </div><br><ul><li>git add files 把文件的修改添加到暂存区</li><li>git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了</li><li>git reset – files 使用当前分支上的修改覆盖暂存区，用来撤销最后一次 git add files</li><li>git checkout – files 使用暂存区的修改覆盖工作目录，用来撤销本地修改</li></ul><div align="center"> <img src="pics/11a786f0-5e02-46a6-92f0-f302c9cf6ca3_200.png"> </div><br><p>可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中。</p><ul><li>git commit -a 直接把所有文件的修改添加到暂存区然后执行提交</li><li>git checkout HEAD – files 取出最后一次修改，可以用来进行回滚操作</li></ul><div align="center"> <img src="pics/b48b9a7a-f9f8-4cf9-90f1-5cddd685b782_200.png"> </div><br><h1 id="分支实现"><a href="#分支实现" class="headerlink" title="分支实现"></a>分支实现</h1><p>使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。</p><div align="center"> <img src="pics/84d496d7-54b0-4a9b-9499-ce232057e499_200.png"> </div><br><p>新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支表示新分支成为当前分支。</p><div align="center"> <img src="pics/7c5bcdbf-e656-4b7c-be82-b247a3589ed5_200.png"> </div><br><p>每次提交只会让当前分支指针向前移动，而其它分支指针不会移动。</p><div align="center"> <img src="pics/13783e94-b481-4aea-9fa2-9d1973abd47e_200.png"> </div><br><p>合并分支也只需要改变指针即可。</p><div align="center"> <img src="pics/15699a17-5a69-4fbe-852e-9d2b7cf05e80_200.png"> </div><br><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。</p><div align="center"> <img src="pics/7e82ce01-2afb-4c15-b720-b81049c875c2_200.png"> </div><br><p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><h1 id="Fast-forward"><a href="#Fast-forward" class="headerlink" title="Fast forward"></a>Fast forward</h1><p>“快进式合并”（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。</p><p>可以在合并时加上 –no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><div align="center"> <img src="pics/fa1dc552-8501-439e-b85a-3d9eac704880_200.png"> </div><br><h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><p>master 分支应该是非常稳定的，只用来发布新版本；</p><p>日常开发在开发分支 dev 上进行。</p><div align="center"> <img src="pics/245fd2fb-209c-4ad5-bc5e-eb5664966a0e.jpg"> </div><br><h1 id="储藏（Stashing）"><a href="#储藏（Stashing）" class="headerlink" title="储藏（Stashing）"></a>储藏（Stashing）</h1><p>在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。</p><p>可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈上，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state \ &quot;WIP on master: 049d078 added the index file&quot;</span><br><span class="line">HEAD is now at 049d078 added the index file (To restore them type &quot;git stash apply&quot;)</span><br></pre></td></tr></table></figure><p>该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。</p><h1 id="SSH-传输设置"><a href="#SSH-传输设置" class="headerlink" title="SSH 传输设置"></a>SSH 传输设置</h1><p>Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。</p><p>如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>然后把公钥 id_rsa.pub 的内容复制到 Github “Account settings” 的 SSH Keys 中。</p><h1 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h1><p>忽略以下文件：</p><ul><li>操作系统自动生成的文件，比如缩略图；</li><li>编译生成的中间文件，比如 Java 编译产生的 .class 文件；</li><li>自己的敏感信息，比如存放口令的配置文件。</li></ul><p>不需要全部自己编写，可以到 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 中进行查询。</p><h1 id="Git-命令一览"><a href="#Git-命令一览" class="headerlink" title="Git 命令一览"></a>Git 命令一览</h1><div align="center"> <img src="pics/7a29acce-f243-4914-9f00-f2988c528412.jpg"> </div><br><p>比较详细的地址：<a href="http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf" target="_blank" rel="noopener">http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">Git - 简明指南</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解 Git</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰 : Git 教程</a></li><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git Branching</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CyC2018/Backend-Interview-Guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击阅读面试进阶指南 &lt;/a&gt;&lt;!-- GFM-TOC --&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo:更换电脑，继续写博客</title>
    <link href="https://shangchao.fun/2018/04/15/hexo-%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>https://shangchao.fun/2018/04/15/hexo-更换电脑，继续写博客/</id>
    <published>2018-04-15T12:32:32.000Z</published>
    <updated>2021-04-14T13:57:20.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录："><a href="#1-将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：" class="headerlink" title="1.将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录："></a>1.将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> _config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><p>将这些目录放到一个目录下，如：hexo／</p><h2 id="2-在你的新电脑上首先配置hexo环境：安装Node-js"><a href="#2-在你的新电脑上首先配置hexo环境：安装Node-js" class="headerlink" title="2.在你的新电脑上首先配置hexo环境：安装Node.js"></a>2.在你的新电脑上首先配置hexo环境：安装Node.js</h2><h2 id="3-安装hexo，执行命令："><a href="#3-安装hexo，执行命令：" class="headerlink" title="3.安装hexo，执行命令："></a>3.安装hexo，执行命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="4-安装好之后，进入hexo／目录"><a href="#4-安装好之后，进入hexo／目录" class="headerlink" title="4.安装好之后，进入hexo／目录"></a>4.安装好之后，进入hexo／目录</h2><h2 id="5-模块安装，执行命令："><a href="#5-模块安装，执行命令：" class="headerlink" title="5.模块安装，执行命令："></a>5.模块安装，执行命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="6-部署，执行命令："><a href="#6-部署，执行命令：" class="headerlink" title="6.部署，执行命令："></a>6.部署，执行命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：&quot;&gt;&lt;a href=&quot;#1-将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建博客</title>
    <link href="https://shangchao.fun/2018/04/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://shangchao.fun/2018/04/14/搭建博客/</id>
    <published>2018-04-14T13:53:46.000Z</published>
    <updated>2021-04-14T14:52:41.862Z</updated>
    
    <content type="html"><![CDATA[<p>很早就想搭建一个博客来记录一些心得和笔记了<br>周转了很多人的教程都多多少少存在一些小问题,综合了几个终于把自己的搭建完成了<br>整理了一下记录下来</p><p>首先来看一下整体流程吧！<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/mulu.jpg" alt="img"></p><blockquote><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1. 准备工作"></a>1.1. 准备工作</h3></blockquote><p>在开始一切之前,你必须已经：</p><ul><li>有一个github账号,没有的话去注册一个；</li><li>安装了node.js、npm,并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）<br>本文所使用的环境：</li><li><strong>macOS-10.13.6</strong></li><li><strong>node.js-8.12</strong></li><li><strong>git-2.18</strong></li><li><strong>hexo-3.7.1</strong></li></ul><blockquote><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1. 创建仓库"></a>2.1. 创建仓库</h3></blockquote><p>新建一个名为你的用户名.github.io的仓库,比如说,如果你的github用户名是test,那么你就新建test.github.io的仓库（必须是你的用户名,其它名称无效）,将来你的网站访问地址就是 <a href="http://test.github.io/" target="_blank" rel="noopener">http://test.github.io</a> 了,是不是很方便？<br>由此可见,每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库.<br>几个注意的地方：</p><ol><li>注册的邮箱一定要验证,否则不会成功；</li><li>仓库名字必须是：username.github.io,其中username是你的用户名；</li><li>库创建成功不会立即生效,需要过一段时间,大概10-30分钟,或者更久,我的等了半个小时才生效；<br>创建成功后,默认会在你这个仓库里生成一些示例页面,以后你的网站所有代码都是放在这个仓库里啦.</li></ol><blockquote><h3 id="2-2-绑定域名"><a href="#2-2-绑定域名" class="headerlink" title="2.2. 绑定域名"></a>2.2. 绑定域名</h3></blockquote><p>当然,你不绑定域名肯定也是可以的,就用默认的 xxx.github.io 来访问,如果你想更个性一点,想拥有一个属于自己的域名,那也是OK的.<br>首先你要注册一个域名,域名注册以前总是推荐去godaddy,现在觉得其实国内的阿里云也挺不错的,价格也不贵,毕竟是大公司,放心！<br>买好了域名之后就按照它提示的流程进行绑定和认证！我当时就是没认证一直配置缺没有用也找不到原因.<br>绑定域名分2种情况：带www和不带www的.<br>域名配置最常见有2种方式,CNAME和A记录,CNAME填写域名,A记录填写IP,由于不带www方式只能采用A记录,所以必须先ping一下你的用户名.github.io的IP,然后到你的域名DNS设置页,将A记录指向你ping出来的IP,将CNAME指向你的用户名.github.io,这样可以保证无论是否添加www都可以访问,如下：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/yuming.jpg" alt="img"><br>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀）,里面填写你的域名,加不加www看你自己喜好,因为经测试：</p><ul><li>如果你填写的是没有www的,比如 mygit.me,那么无论是访问 <a href="http://www.mygit.me/" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me/" target="_blank" rel="noopener">http://mygit.me</a> ,都会自动跳转到 <a href="http://mygit.me/" target="_blank" rel="noopener">http://mygit.me</a></li><li>如果你填写的是带www的,比如 <a href="http://www.mygit.me/" target="_blank" rel="noopener">www.mygit.me</a> ,那么无论是访问 <a href="http://www.mygit.me/" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me/" target="_blank" rel="noopener">http://mygit.me</a> ,都会自动跳转到 <a href="http://www.mygit.me/" target="_blank" rel="noopener">http://www.mygit.me</a></li><li>如果你填写的是其它子域名,比如 abc.mygit.me,那么访问 <a href="http://abc.mygit.me/" target="_blank" rel="noopener">http://abc.mygit.me</a> 没问题,但是访问 <a href="http://mygit.me/" target="_blank" rel="noopener">http://mygit.me</a> ,不会自动跳转到 <a href="http://abc.mygit.me/" target="_blank" rel="noopener">http://abc.mygit.me</a><br>另外说一句,在你绑定了新域名之后,原来的你的用户名.github.io并没有失效,而是会自动跳转到你的新域名.<br>配置SSH key</li></ul><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以,但是直接使用用户名和密码太不安全了,所以我们使用ssh key来解决本地和服务器的连接问题.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>然后连续3次回车,最终会生成一个文件在用户目录下,打开用户目录,找到.ssh\id_rsa.pub文件,记事本打开并复制里面的内容,打开你的github主页,进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key:</p><p>将刚复制的内容粘贴到key那里,title随便填,保存.</p><blockquote><h3 id="3-1-测试是否成功"><a href="#3-1-测试是否成功" class="headerlink" title="3.1. 测试是否成功"></a>3.1. 测试是否成功</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?,输入yes,然后会看到：<br>Hi haozz1! You’ve successfully authenticated, but GitHub does not provide shell access.<br>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;haozz1&quot;// 你的github用户名,非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><blockquote><h3 id="4-1-hexo简介"><a href="#4-1-hexo简介" class="headerlink" title="4.1. hexo简介"></a>4.1. hexo简介</h3></blockquote><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具,支持Markdown格式,有众多优秀插件和主题.<br><a href="http://hexo.io/" target="_blank" rel="noopener">hexo官网</a></p><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">github: https://github.com/hexojs/hexo</a></p><blockquote><h3 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2. 原理"></a>4.2. 原理</h3></blockquote><p>由于github pages存放的都是静态文件,博客存放的不只是文章内容,还有文章列表、分类、标签、翻页等动态内容,假如每次写完一篇文章都要手动更新博文目录和相关链接信息,相信谁都会疯掉,所以hexo所做的就是将这些md文件都放在本地,每次写完文章后调用写好的命令来批量完成相关页面的生成,然后再将有改动的页面提交到github.</p><blockquote><h3 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3. 注意事项"></a>4.3. 注意事项</h3></blockquote><p>安装之前先来说几个注意事项：</p><ol><li>很多命令既可以用Windows的cmd来完成,也可以使用git bash来完成,但是部分命令会有一些问题,为避免不必要的问题,建议全部使用git bash来执行；</li><li>hexo不同版本差别比较大,网上很多文章的配置信息都是基于2.x的,所以注意不要被误导；</li><li>hexo有2种_config.yml文件,一个是根目录下的全局的_config.yml,一个是各个theme下的；</li></ol><blockquote><h3 id="4-4-安装"><a href="#4-4-安装" class="headerlink" title="4.4. 安装"></a>4.4. 安装</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><blockquote><h3 id="4-5-初始化"><a href="#4-5-初始化" class="headerlink" title="4.5. 初始化"></a>4.5. 初始化</h3></blockquote><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取）,比如我的是F:\Workspaces\hexo,由于这个文件夹将来就作为你存放代码的地方,所以最好不要随便放.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录,包括node_modules,目录结构如下图：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/node.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>执行以上命令之后,hexo就会在public文件夹生成相关html文件,这些文件将来都是要提交到github去的：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/tijiao.jpg" alt="img"><br>hexo s是开启本地预览服务,打开浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容,很多人会碰到浏览器一直在转圈但是就是加载不出来的问题,一般情况下是因为端口占用的缘故,因为4000这个端口太常见了,解决端口冲突问题请参考这篇文章：<br><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a><br>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章,默认的主题比较丑,打开时就是这个样子：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/boke.jpg" alt="img"></p><blockquote><h3 id="4-6-修改主题"><a href="#4-6-修改主题" class="headerlink" title="4.6. 修改主题"></a>4.6. 修改主题</h3></blockquote><p>既然默认主题很丑,那我们别的不做,首先来替换一个好看点的主题.这是 官方主题.<br>个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia.<br>首先下载这个主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>下载后的主题都在这里：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/zhuti.jpg" alt="img"><br>修改_config.yml中的theme: landscape改为theme: yilia,然后重新执行hexo g来重新生成.<br>如果出现一些莫名其妙的问题,可以先执行hexo clean来清理一下public的内容,然后再来重新生成和发布.</p><blockquote><h3 id="4-7-上传之前"><a href="#4-7-上传之前" class="headerlink" title="4.7. 上传之前"></a>4.7. 上传之前</h3></blockquote><p>在上传代码到github之前,一定要记得先把你以前所有代码下载下来（虽然github有版本管理,但备份一下总是好的）,因为从hexo提交代码时会把你以前的所有代码都删掉.</p><blockquote><h3 id="4-8-上传到github"><a href="#4-8-上传到github" class="headerlink" title="4.8. 上传到github"></a>4.8. 上传到github</h3></blockquote><p>如果你一切都配置好了,发布上传很容易,一句hexo d就搞定,当然关键还是你要把所有东西配置好.<br>首先,ssh key肯定要配置好.<br>其次,配置_config.yml中有关deploy的部分：<br>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:haozz1/haozz1.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/haozz1/haozz1.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>后面一种写法是hexo2.x的写法,现在已经不行了,无论是哪种写法,此时直接执行hexo d的话一般会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure><p>原因是还需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>其它命令不确定,部署这个命令一定要用git bash,否则会提示Permission denied (publickey).<br>打开你的git bash,输入hexo d就会将本次有改动的代码全部提交,没有改动的不会：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/git.jpg" alt="img"></p><blockquote><h3 id="4-9-保留CNAME、README-md等文件"><a href="#4-9-保留CNAME、README-md等文件" class="headerlink" title="4.9. 保留CNAME、README.md等文件"></a>4.9. 保留CNAME、README.md等文件</h3></blockquote><p>提交之后网页上一看,发现以前其它代码都没了,此时不要慌,一些非md文件可以把他们放到source文件夹下,这里的所有文件都会原样复制（除了md文件）到public目录的：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/baoliu.jpg" alt="img"><br>由于hexo默认会把所有md文件都转换成html,包括README.md,所有需要每次生成之后、上传之前,手动将README.md复制到public目录,并删除README.html.</p><p>到此,一个新的GitHub博客就搭建完成,剩下的就是更新博客了！工作学习中有了新的领悟和想法及时写下来发布上去！<br>那下面就是应用hexo技术来写一篇博客了</p><blockquote><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3></blockquote><p>定位到我们的hexo根目录,执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在_posts下生成相关md文件：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/new.jpg" alt="img"><br>我们只需要打开这个文件就可以开始写博客了,默认生成如下内容：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/write.jpg" alt="img"><br>当然你也可以直接自己新建md文件,用这个命令的好处是帮我们自动生成了时间.</p><h3 id="一般完整格式如下："><a href="#一般完整格式如下：" class="headerlink" title="一般完整格式如下："></a>一般完整格式如下：</h3><blockquote><p>title: postName #文章页面上的显示名称,一般是中文<br>date: 2013-12-02 15:30:16 #文章生成时间,一般不改,当然也可以任意修改<br>categories: 默认分类 #分类<br>tags: [tag1,tag2,tag3] #文章标签,可空,多标签请用格式,注意:后面有个空格<br>description: 附加一段文章摘要,字数最好在140字以内,会出现在meta的description里面</p></blockquote><p>那么hexo new page ‘postName’命令和hexo new ‘postName’有什么区别呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;my-second-blog&quot;</span><br></pre></td></tr></table></figure><p>生成如下：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/shengcheng.jpg" alt="img"><br>最终部署时生成：hexo\public\my-second-blog\index.html,但是它不会作为文章出现在博文目录.</p><blockquote><h3 id="写博客工具"><a href="#写博客工具" class="headerlink" title="写博客工具"></a>写博客工具</h3></blockquote><p>那么用什么工具写博客呢？<br><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">http://www.williamlong.info/archives/4319.html</a><br>这里面推荐了不少编辑Markdown格式文档的工具,或者不使用工具自己熟悉一些常用的Markdown语法手动编写.<br>Mac中也有好多免费的Markdown编辑器,用着到没印象笔记方便,看自己选择了.</p><hr><p>2018年9月30日12:29<br>我一直用的印象笔记里最近也更新了Markdown文档的编辑,特殊格式可以直接生成很方便.</p><hr><blockquote><h3 id="如何让博文列表不显示全部内容"><a href="#如何让博文列表不显示全部内容" class="headerlink" title="如何让博文列表不显示全部内容"></a>如何让博文列表不显示全部内容</h3></blockquote><p>默认情况下,生成的博文目录会显示全部的文章内容,如何设置文章摘要的长度呢？<br>答案是在合适的位置加上 <code>&lt;!--more--&gt;</code> 即可,例如：<br>最终效果：<br><img src="http://besthao.cn/2018/09/18/%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%9E%E7%94%9F/more.jpg" alt="img"></p><blockquote><h3 id="如何在博文中添加图片"><a href="#如何在博文中添加图片" class="headerlink" title="如何在博文中添加图片"></a>如何在博文中添加图片</h3></blockquote><ol><li><p>修改hexo博客项目根目录_config.yml配置文件post_asset_folder项为true.</p></li><li><p>hexo new “hexo发布带图片博客”</p></li><li><p>在source/_post文件夹里面就会出现一个“hexo发布带图片博客.md”的文件和一个“hexo发布带图片博客”的文件夹.</p></li><li><p>引用图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 引用图片代码.png 由于hexo会把代码解析,所以此处用图片展示 %&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><h3 id="使用github-pages服务搭建博客的好处有："><a href="#使用github-pages服务搭建博客的好处有：" class="headerlink" title="使用github pages服务搭建博客的好处有："></a>使用github pages服务搭建博客的好处有：</h3></blockquote><ol><li>全是静态文件,访问速度快；</li><li>免费方便,不用花一分钱就可以搭建一个自由的个人博客,不需要服务器不需要后台；</li><li>可以随意绑定自己的域名,不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全,基于github的版本管理,想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>等等；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很早就想搭建一个博客来记录一些心得和笔记了&lt;br&gt;周转了很多人的教程都多多少少存在一些小问题,综合了几个终于把自己的搭建完成了&lt;br&gt;整理了一下记录下来&lt;/p&gt;
&lt;p&gt;首先来看一下整体流程吧！&lt;br&gt;&lt;img src=&quot;http://besthao.cn/2018/09/1
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://shangchao.fun/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://shangchao.fun/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
